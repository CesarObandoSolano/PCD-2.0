<?xml version="1.0"?>
<doc>
    <assembly>
        <name>UCommerce.Pipelines</name>
    </assembly>
    <members>
        <member name="T:UCommerce.Pipelines.Catalog.Admin.CategorySave.UpdateCategoryRevisionTask">
            <summary>
            Updates the revision of the category
            </summary>
        </member>
        <member name="T:UCommerce.Pipelines.Catalog.Admin.ProductCatalogGroupSave.UpdateProductCatalogGroupRevisionTask">
            <summary>
            Updates the revision of the ProductCatalogGroup
            </summary>
        </member>
        <member name="T:UCommerce.Pipelines.Catalog.Admin.ProductCatalogSave.UpdateProductCatalogRevisionTask">
            <summary>
            Updates the revision of catalog.
            </summary>
        </member>
        <member name="T:UCommerce.Pipelines.Catalog.Admin.ProductSave.UpdateProductRevisionTask">
            <summary>
            Updates the revision of the product and the variants
            </summary>
        </member>
        <member name="T:UCommerce.Pipelines.Definitions.Admin.DataTypeSave.UpdateDataTypeRevisionTask">
            <summary>
            Updates the data type revision
            </summary>
        </member>
        <member name="T:UCommerce.Pipelines.Definitions.Admin.DefinitionSave.UpdateDefinitionRevisionTask">
            <summary>
            Update the definition revision
            </summary>
        </member>
        <member name="T:UCommerce.Pipelines.Initialization.InitializePipeline">
            <summary>
            The initialize pipeline class.
            </summary>
        </member>
        <member name="M:UCommerce.Pipelines.Initialization.InitializePipeline.#ctor(UCommerce.Pipelines.IPipelineTask{UCommerce.Pipelines.Initialization.InitializeArgs}[],UCommerce.Infrastructure.Logging.ILoggingService)">
            <summary>
            Creates a new InitalizePipeline object
            </summary>
            <param name="tasks">The tasks to run.</param>
            <param name="loggingService">The logging service.</param>
        </member>
        <member name="T:UCommerce.Pipelines.Initialization.InitializeArgs">
            <summary>
            Empty pipeline arguments class.
            </summary>
        </member>
        <member name="T:UCommerce.Pipelines.Transactions.Baskets.AddToBasket.AddNewOrderLineToOrderTask">
            <summary>
            If a new order line was created it gets added to the purchase order and vice versa.
            </summary>
        </member>
        <member name="T:UCommerce.Pipelines.Transactions.Baskets.AddToBasket.IncrementQuantityTask">
            <summary>
            Increments the response's order line's quantity by the request's quantity.
            </summary>
        </member>
        <member name="T:UCommerce.Pipelines.Transactions.Baskets.AddToBasket.CalculateUnitTaxTask">
            <summary>
             Calculates the unit tax if it's not set on the request and updates the response's orderline accordingly.
            </summary>
        </member>
        <member name="T:UCommerce.Pipelines.Transactions.Baskets.AddToBasket.CreateOrderLineTask">
            <summary>
            Creates a new order line and sets it as the order line on the response.
            </summary>
        </member>
        <member name="T:UCommerce.Pipelines.Transactions.Baskets.AddToBasket.ExecuteBasketPipelineTask">
            <summary>
            Check whatever BasketPipeline should be execute or not. 
            </summary>
        </member>
        <member name="T:UCommerce.Pipelines.Transactions.Baskets.AddToBasket.ValidateProductIsAddedWithSameCurrencyAsBasketTask">
            <summary>
            Validates that currency of the price group matches the basket's billing currency.
            </summary>
        </member>
        <member name="T:UCommerce.Pipelines.Transactions.Baskets.AddToBasket.ValidateIsSellableProductTask">
            <summary>
            Checks whatever the product is not a product family.
            </summary>
        </member>
        <member name="T:UCommerce.Pipelines.Transactions.Baskets.AddToBasket.CopyProductNameFromCatalogTask">
            <summary>
            Copies the name from the Catalog and sets it on the response's order line.
            </summary>
            <remarks>
            If a product name is already present it will not be overwritten.
            </remarks>
        </member>
        <member name="T:UCommerce.Pipelines.Transactions.Baskets.AddToBasket.CalculateUnitPriceTask">
            <summary>
            Calculates the unit price if it's not set on the request and updates the response's orderline accordingly.
            </summary>
        </member>
        <member name="T:UCommerce.Pipelines.Transactions.Baskets.AddToBasket.ValidatePipelineArgumentsTask">
            <summary>
            Validates the input parameters.
            </summary>
        </member>
        <member name="T:UCommerce.Pipelines.Transactions.Baskets.Basket.EnsureOrderLinesDiscountNotExceedTheOrderLinesTotalTask">
            <summary>
            Makes sure that a customer can't get more dicount then the order line total.  
            </summary>
        </member>
        <member name="T:UCommerce.Pipelines.Transactions.Baskets.Basket.RemoveAllDiscountsFromOrderTask">
            <summary>
            Removes all discounts from the collections on the purchase order, its order lines and its shipments
            </summary>
        </member>
        <member name="T:UCommerce.Pipelines.Transactions.Baskets.CreateBasket.CreateBasketPipeline">
            <summary>
            Creates a new basket. 
            </summary>
        </member>
        <member name="T:UCommerce.Pipelines.Transactions.Baskets.CreateBasket.PersistBasketToCookieTask">
            <summary>
            Assign a cookie for the new purchaseOrder.
            </summary>
        </member>
        <member name="T:UCommerce.Pipelines.Transactions.Baskets.CreateBasket.SaveBasketTask">
            <summary>
            Save the created basket. 
            </summary>
        </member>
        <member name="T:UCommerce.Pipelines.Transactions.Baskets.GetBasket.ExecuteCreateBasketTask">
            <summary>
            Execute the CreateBasket pipeline if purchaseOrder couldn't be loaded and Create is true.
            </summary>
        </member>
        <member name="T:UCommerce.Pipelines.Transactions.Customers.CreateMember.CreateMemberTask">
            <summary>
            Creates the <see cref="T:UCommerce.EntitiesV2.Member"/>. The member will be created if no member has been loaded. 
            </summary>
        </member>
        <member name="M:UCommerce.Pipelines.Transactions.Customers.CreateMember.GeneratePasswordIfEmptyTask.GeneratePassword">
            <summary>
            Generates a default password for the new <see cref="T:UCommerce.EntitiesV2.Member"/>.
            </summary>
            <returns></returns>
            <remarks>Default passwords will contain to plain English words separated by two numbers.</remarks>
        </member>
        <member name="T:UCommerce.Pipelines.Catalog.GetProduct.GetProductTask">
            <summary>
            Gets the product or variant product if exist. 
            </summary>
        </member>
        <member name="M:UCommerce.Pipelines.Catalog.GetProduct.GetProductTask.#ctor(UCommerce.EntitiesV2.IRepository{UCommerce.EntitiesV2.Product})">
            <param name="productRepository">Used to get the product</param>
        </member>
        <member name="T:UCommerce.Pipelines.Transactions.Baskets.AddToBasket.ValidateOrderAssignedToProductCatalogGroupTask">
            <summary>
            Insure that order has a catalog group assigned. 
            </summary>
        </member>
        <member name="T:UCommerce.Pipelines.Transactions.Baskets.Basket.ApplyAwardsTask">
            <summary>
            Enables Marketing Foundation to apply awards on <see cref="T:UCommerce.EntitiesV2.PurchaseOrder"/>.
            </summary>
        </member>
        <member name="M:UCommerce.Pipelines.Transactions.Baskets.Basket.ApplyAwardsTask.#ctor(UCommerce.Marketing.IDiscountService)">
            <summary>
            Initializes a new instance of the <see cref="T:UCommerce.Pipelines.Transactions.Baskets.Basket.ApplyAwardsTask"/> class.
            </summary>
            <param name="discountService">The discount service.</param>
        </member>
        <member name="T:UCommerce.Pipelines.Transactions.Baskets.Basket.CalculateOrderDiscountTotalTask">
            <summary>
            Calculates the total of all discounts applied to the order.
            </summary>
            <remarks>
            Order-, order line-, and shipping discounts are all included.
            </remarks>
        </member>
        <member name="T:UCommerce.Pipelines.Transactions.Baskets.Basket.CalculateOrderLinesUnitDiscountsTask">
            <summary>
            Calculates <see cref="T:UCommerce.EntitiesV2.OrderLine"></see> unit discount by summing all discounts assigned to the order line
            and diving it by the quantity on the order line.
            </summary>
        </member>
        <member name="T:UCommerce.Pipelines.Transactions.Baskets.Basket.CalculateOrderLineTaxRateTask">
            <summary>
            Calcualtes tax rates for order lines 
            based on their unit price and unit tax.
            </summary>
            <remarks>
            Recaulculate Tax if custom ITaxService
            Must be execute before calculating discounts.  
            </remarks>
        </member>
        <member name="F:UCommerce.Pipelines.Transactions.Baskets.Basket.CalculateOrderLineTaxRateTask.Threshhold">
            <summary>
            The threshhold value for the maximum rounding error when recalculating the VATRate.
            </summary>
            <remarks>
            The value was found by running the unit test UCommerce.Test.EntitiesV2.RoundingErrorTests.CheckRoundingErrorThreshholdValueTest.
            </remarks>
        </member>
        <member name="T:UCommerce.Pipelines.Transactions.Baskets.Basket.CalculateOrderLineTaxTask">
            <summary>
            Calculates <see cref="T:UCommerce.EntitiesV2.OrderLine"/> tax based on stored values in VATRate, UnitPrice, and UnitDiscount.
            </summary>
        </member>
        <member name="T:UCommerce.Pipelines.Transactions.Baskets.Basket.CalculateOrderSubTotalTask">
            <summary>
            Calculates sub total for <see cref="T:UCommerce.EntitiesV2.PurchaseOrder"/>.
            </summary>
            <remarks>
            Will subtract any order level discounts summed in the PurchaseOrder.Discount field.
            </remarks>
        </member>
        <member name="T:UCommerce.Pipelines.Transactions.Baskets.Basket.CalculateOrderTaxTotalTask">
            <summary>
            Calculates global tax for entire <see cref="T:UCommerce.EntitiesV2.PurchaseOrder"/>.
            </summary>
            <remark>
            Will sum individual tax fields from purchase order VAT and shipping tax.
            </remark>
        </member>
        <member name="T:UCommerce.Pipelines.Transactions.Baskets.Basket.CalculateOrderTotalTask">
            <summary>
            Calculates order total by adding all sub totals.
            </summary>
        </member>
        <member name="T:UCommerce.Pipelines.Transactions.Baskets.Basket.CalculateOrderVatTotalTask">
            <summary>
            Sums VAT from individual <see cref="T:UCommerce.EntitiesV2.OrderLine">order lines</see> times quantity 
            and sets the VAT on <see cref="T:UCommerce.EntitiesV2.PurchaseOrder"/>.
            </summary>
            <remarks>
            Depends on VAT being set on individual <see cref="T:UCommerce.EntitiesV2.OrderLine">order lines</see>
            and sub total being calculated on the <see cref="T:UCommerce.EntitiesV2.PurchaseOrder"/>.
            </remarks>
        </member>
        <member name="M:UCommerce.Pipelines.Transactions.Baskets.Basket.CalculateOrderVatTotalTask.Execute(UCommerce.EntitiesV2.PurchaseOrder)">
            <summary>
            Executes the calculation.
            </summary>
            <param name="purchaseOrder">The subject.</param>
            <returns></returns>
        </member>
        <member name="T:UCommerce.Pipelines.Transactions.Baskets.Basket.CalculateShippingDiscountTask">
            <summary>
            Calculates shipping discount based on attached <see cref="T:UCommerce.EntitiesV2.Discount">discounts</see>
            on <see cref="T:UCommerce.EntitiesV2.Shipment"/>.
            </summary>
        </member>
        <member name="T:UCommerce.Pipelines.Transactions.Baskets.Basket.CalculateShippingCostForShipmentsTask">
            <summary>
            Iterates through each <see cref="T:UCommerce.EntitiesV2.Shipment"/> on the <see cref="T:UCommerce.EntitiesV2.PurchaseOrder"/> and
            executes the configured <see cref="T:UCommerce.Transactions.Shipping.IShippingMethodService"/> for the <see cref="T:UCommerce.EntitiesV2.ShippingMethod"/>
            selected for the <see cref="T:UCommerce.EntitiesV2.Shipment"/>
            </summary>
        </member>
        <member name="T:UCommerce.Pipelines.Transactions.Baskets.Basket.CalculateShippingTaxForShipmentsTask">
            <summary>
            Calculates tax for <see cref="T:UCommerce.EntitiesV2.Shipment">shipments</see> associated with the <see cref="T:UCommerce.EntitiesV2.PurchaseOrder"/>.
            </summary>
            <remarks>
            Looks up <see cref="T:UCommerce.EntitiesV2.PriceGroup"/> based on <see cref="T:UCommerce.EntitiesV2.Currency">billing currency</see> of <see cref="T:UCommerce.EntitiesV2.PurchaseOrder"/>
            and calculates tax based on tax rate configured.
            </remarks>
        </member>
        <member name="M:UCommerce.Pipelines.Transactions.Baskets.Basket.CalculateShippingTaxForShipmentsTask.#ctor(UCommerce.Catalog.ITaxService,UCommerce.Transactions.IRoundingService)">
            <summary>
            Initializes a new instance of the <see cref="T:UCommerce.Pipelines.Transactions.Baskets.Basket.CalculateShippingTaxForShipmentsTask"/> class.
            </summary>
        </member>
        <member name="T:UCommerce.Pipelines.Transactions.Baskets.Basket.CalculateShippingTotalForShipmentsTask">
            <summary>
            Calculates the shipping total for individual <see cref="T:UCommerce.EntitiesV2.Shipment"/>.
            </summary>
        </member>
        <member name="T:UCommerce.Pipelines.Transactions.Baskets.Basket.CalculateShippingTotalTask">
            <summary>
            Sums the shipping total for all <see cref="T:UCommerce.EntitiesV2.Shipment">shipments</see> associated with the <see cref="T:UCommerce.EntitiesV2.PurchaseOrder"/>.
            </summary>
        </member>
        <member name="T:UCommerce.Pipelines.Transactions.Baskets.Basket.CleanUpTask">
            <summary>
            Brings order in proper state before executing pipeline.
            </summary>
        </member>
        <member name="M:UCommerce.Pipelines.Transactions.Baskets.Basket.ConvertOrderLevelDiscountsToOrderLinesDiscount.#ctor">
            <summary>
            Converts orderlevel discounts to order lines discount by adding the discount on every orderline.
            </summary>
        </member>
        <member name="T:UCommerce.Pipelines.Transactions.Baskets.Basket.DecrementPaymentsTask">
            <summary>
            Task for decrementing <see cref="T:UCommerce.EntitiesV2.Payment"/> amount if the order total of the <see cref="T:UCommerce.EntitiesV2.PurchaseOrder"/> has changed to less than what the sum of the payments is.
            </summary>
        </member>
        <member name="M:UCommerce.Pipelines.Transactions.Baskets.Basket.DecrementPaymentsTask.GetPaymentDecrementList(UCommerce.EntitiesV2.PurchaseOrder)">
            <summary>
            Gets a list of payments elegiable for getting the amount decremented.
            </summary>
            <param name="purchaseOrder">The purchase order.</param>
            <returns></returns>
        </member>
        <member name="M:UCommerce.Pipelines.Transactions.Baskets.Basket.DecrementPaymentsTask.GetPaymentSumList(UCommerce.EntitiesV2.PurchaseOrder)">
            <summary>
            Gets a list of payments for which to sum the amount.
            </summary>
            <param name="purchaseOrder">The purchase order.</param>
            <returns></returns>
        </member>
        <member name="M:UCommerce.Pipelines.Transactions.Baskets.Basket.DecrementPaymentsTask.Execute(UCommerce.EntitiesV2.PurchaseOrder)">
            <summary>
            Executes the pipeline task.
            </summary>
            <param name="purchaseOrder">The purchase order.</param>
            <returns></returns>
        </member>
        <member name="T:UCommerce.Pipelines.Common.HumanReadableDebugStringTask">
            <summary>
            Writes a human readable debug overview of the purchase order to the log.
            </summary>
        </member>
        <member name="M:UCommerce.Pipelines.Common.HumanReadableDebugStringTask.#ctor(UCommerce.Infrastructure.Logging.ILoggingService)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:UCommerce.Pipelines.Common.HumanReadableDebugStringTask.Execute(UCommerce.EntitiesV2.PurchaseOrder)">
            <summary>
            Executes the pipeline.
            </summary>
        </member>
        <member name="T:UCommerce.Pipelines.Transactions.Baskets.Basket.RoundUpOrderTotalForCurrenciesWithNoDecimalDigitsTask">
            <summary>
            Rounds up the sub total for <see cref="T:UCommerce.EntitiesV2.PurchaseOrder"/>, if the currency does not support cents.
            </summary>
        </member>
        <member name="M:UCommerce.Pipelines.Transactions.Baskets.Basket.RoundUpOrderTotalForCurrenciesWithNoDecimalDigitsTask.Execute(UCommerce.EntitiesV2.PurchaseOrder)">
            <summary>
            Executes the task of rounding up the values where the currency does not support cents.
            </summary>
        </member>
        <member name="T:UCommerce.Pipelines.Transactions.Baskets.Basket.SetCultureCodeTask">
            <summary>
            Updates culture code on <see cref="T:UCommerce.EntitiesV2.PurchaseOrder"/> according to current <see cref="T:UCommerce.Infrastructure.Globalization.ILocalizationContext"/>.
            </summary>
        </member>
        <member name="T:UCommerce.Pipelines.Catalog.Admin.ProductCatalogDelete.DeleteProductCatalogTask">
            <summary>
            PipeLine that runs when a ProductCatalog is being saved.
            </summary>
        </member>
        <member name="T:UCommerce.Pipelines.Catalog.ProductCatalogPipeline">
            <summary>
            Pipeline that runs when a ProductCatalog is saved.
            </summary>
        </member>
        <member name="T:UCommerce.Pipelines.Catalog.Admin.CategoryDelete.DeleteCategoryTask">
            <summary>
            Deletes a <see cref="T:UCommerce.EntitiesV2.Category"/>.
            </summary>
        </member>
        <member name="T:UCommerce.Pipelines.Catalog.Admin.ProductCatalogGroupDelete.DeleteProductCatalogGroupTask">
            <summary>
            PipeLine that runs when a ProductCatalogGroup is being deleted.
            </summary>
        </member>
        <member name="T:UCommerce.Pipelines.Definitions.Admin.ProductDefinitionFieldDelete.DeleteProductDefinitionFieldTask">
            <summary>
            PipeLine that runs when a ProductDefinitionField is being deleted.
            </summary>
        </member>
        <member name="T:UCommerce.Pipelines.Catalog.Admin.ProductDelete.DeleteProductTask">
            <summary>
            Deletes a <see cref="T:UCommerce.EntitiesV2.Product"/>.
            </summary>
        </member>
        <member name="T:UCommerce.Pipelines.Catalog.ProductCatalogGroupPipeline">
            <summary>
            Pipeline run when a ProductCatalogGroup is saved
            </summary>
        </member>
        <member name="T:UCommerce.Pipelines.Catalog.Admin.CategorySave.SaveCategoryTask">
            <summary>
            Saves the <see cref="T:UCommerce.EntitiesV2.Category"/>
            </summary>
        </member>
        <member name="T:UCommerce.Pipelines.Catalog.Admin.ProductCatalogGroupSave.SaveProductCatalogGroupTask">
            <summary>
            PipeLine that runs when a ProductCatalogGroup is being saved.
            </summary>
        </member>
        <member name="T:UCommerce.Pipelines.Catalog.Admin.ProductCatalogSave.SaveProductCatalogTask">
            <summary>
            PipeLine that runs when a ProductCatalog is being saved.
            </summary>
        </member>
        <member name="T:UCommerce.Pipelines.Definitions.Admin.ProductDefinitionFieldSave.SaveProductDefinitionFieldTask">
            <summary>
            PipeLine that runs when a ProductDefinitionField is being saved.
            </summary>
        </member>
        <member name="T:UCommerce.Pipelines.Catalog.Admin.ProductSave.SaveProductTask">
            <summary>
            Saves the <see cref="T:UCommerce.EntitiesV2.Product"/>
            </summary>
        </member>
        <member name="T:UCommerce.Pipelines.Transactions.Baskets.Checkout.DecrementInventoryOnHandTask">
            <summary>
            Decrements inventory for <see cref="T:UCommerce.EntitiesV2.Product">products</see>see&gt; on the <see cref="T:UCommerce.EntitiesV2.PurchaseOrder"></see> based on quantity.
            </summary>
        </member>
        <member name="T:UCommerce.Pipelines.Common.InventoryTask">
            <summary>
            Inventory pipeline task handles increments and decrements of inventory on a <see cref="T:UCommerce.EntitiesV2.Product"/>.
            </summary>
            <remarks>
            By specifying a negative quantity inventory is decremented while a positive quantity will increment it.
            </remarks>
        </member>
        <member name="M:UCommerce.Pipelines.Common.InventoryTask.#ctor(UCommerce.EntitiesV2.IRepository{UCommerce.EntitiesV2.Product})">
            <summary>
            
            </summary>
            <param name="productRepository"></param>
        </member>
        <member name="M:UCommerce.Pipelines.Common.InventoryTask.GetInventoryOnHandFieldName">
            <summary>
            Field name of the stock field on the <see cref="T:UCommerce.EntitiesV2.ProductDefinition"/>. Default field name is InventoryOnHand.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UCommerce.Pipelines.Common.InventoryTask.HasRequiredInventoryField(UCommerce.EntitiesV2.Product)">
            <summary>
            Determines whether the inventory on hand field exists on the <see cref="T:UCommerce.EntitiesV2.Product"/>.
            </summary>
            <param name="product"></param>
            <returns></returns>
        </member>
        <member name="M:UCommerce.Pipelines.Common.InventoryTask.ModifyInventoryForAllOrderLines(UCommerce.EntitiesV2.PurchaseOrder,System.Boolean)">
            <summary>
            Iterates through all <see cref="T:UCommerce.EntitiesV2.OrderLine">order lines</see> on the <see cref="T:UCommerce.EntitiesV2.PurchaseOrder"/> and modifies invetory levels.
            </summary>
            <param name="purchaseOrder"></param>
            <param name="decrement"></param>
        </member>
        <member name="M:UCommerce.Pipelines.Common.InventoryTask.GetProductFromOrderLine(UCommerce.EntitiesV2.OrderLine)">
            <summary>
            Gets the product from order line.
            </summary>
            <param name="lineItem">The line item.</param>
            <returns></returns>
        </member>
        <member name="M:UCommerce.Pipelines.Common.InventoryTask.ModifyInventoryOnHand(UCommerce.EntitiesV2.Product,UCommerce.EntitiesV2.OrderLine,System.Int32)">
            <summary>
            Modifies inventory on hand for the <see cref="T:UCommerce.EntitiesV2.Product"/> according to quantity.
            </summary>
            <param name="product"></param>
            <param name="lineItem"></param>
            <returns></returns>
        </member>
        <member name="T:UCommerce.Pipelines.Transactions.Baskets.Checkout.SetVoucherUsesTask">
            <summary>
            Updates uses on vouchers present on the <see cref="T:UCommerce.EntitiesV2.PurchaseOrder"/> at runtime.
            </summary>
        </member>
        <member name="T:UCommerce.Pipelines.Transactions.Baskets.Checkout.ValidatePaymentsMadeAgainstOrderTotalTask">
            <summary>
            Validates that sufficient payments are made on the order to cover the order total.
            </summary>
            <remarks>
            A payment is considered valid when its status either Authorized or Acquired.
            </remarks>
        </member>
        <member name="T:UCommerce.Pipelines.Common.AddAuditTrailForCurrentOrderStatusTask">
            <summary>
            Adds audit trail for order. Please note that the <see cref="T:UCommerce.EntitiesV2.PurchaseOrder"/> must have an <see cref="T:UCommerce.EntitiesV2.OrderStatus"/> set
            and it must have an OrderId assigned, ie. it must have been saved at least once before this task is run.
            </summary>
        </member>
        <member name="T:UCommerce.Pipelines.Transactions.Baskets.Checkout.AssignOrderNumberTask">
            <summary>
            Assigns an order number to the order if none is present
            </summary>
        </member>
        <member name="T:UCommerce.Pipelines.Transactions.Baskets.Checkout.CheckoutPipeline">
            <summary>
            Pipeline run when completing checkout process
            </summary>
        </member>
        <member name="T:UCommerce.Pipelines.Transactions.Baskets.Checkout.ClearBasketInformationTask">
            <summary>
            Clears basket information for the current user and effectively assigns the customer a new <see cref="N:UCommerce.Pipelines.Transactions.Baskets.Basket"/>
            </summary>
        </member>
        <member name="T:UCommerce.Pipelines.Transactions.Baskets.Checkout.ConvertBasketToPurchaseOrderTask">
            <summary>
            Converts a <see cref="N:UCommerce.Pipelines.Transactions.Baskets.Basket"/> to a <see cref="T:UCommerce.EntitiesV2.PurchaseOrder"/> by changing the order status to "New Order" (order status id 2)
            </summary>
        </member>
        <member name="M:UCommerce.Pipelines.Transactions.Baskets.Checkout.CreateCustomerTask.TryGetCustomerFromLoggedInMember">
            <summary>
            Tries to load a pre-linked customer for the current member.
            </summary>
            <returns></returns>
        </member>
        <member name="T:UCommerce.Pipelines.Transactions.Baskets.Checkout.CreateMemberForCustomerTask">
            <summary>
            Sets memberId on customer.
            </summary>
        </member>
        <member name="M:UCommerce.Pipelines.Transactions.Baskets.Checkout.CreateMemberForCustomerTask.#ctor(UCommerce.Pipelines.IPipeline{UCommerce.Pipelines.IPipelineArgs{UCommerce.Pipelines.CreateMember.CreateMemberRequest,UCommerce.Pipelines.CreateMember.CreateMemberResponse}},UCommerce.Security.IMemberService)">
            <summary>
            Execute pipelin to get the member. 
            </summary>
            <param name="createMemberPipeline"></param>
            <param name="memberService"></param>
        </member>
        <member name="T:UCommerce.Pipelines.Common.SendEmailTask">
            <summary>
            Sends out e-mail based on the specified e-mail type. E-mail stored on billing address is used as receiver e-mail.
            </summary>
            <remarks>
            Example of configuration SendEmailTask to send OrderConfirmation e-mail:
            <component id="Checkout.SendConfirmationEmail"
               service="UCommerce.Pipelines.IPipelineTask`1[[UCommerce.Entities.PurchaseOrder, UCommerce]], UCommerce"
               type="UCommerce.Pipelines.Common.SendEmailTask, UCommerce.Pipelines">
            	<parameters>
            		<emailTypeName>OrderConfirmation</emailTypeName>
            	</parameters>
            </component>
            </remarks>
        </member>
        <member name="M:UCommerce.Pipelines.Transactions.Customers.CreateCustomer.CreateCustomerTask.Execute(UCommerce.Pipelines.IPipelineArgs{UCommerce.Pipelines.CreateCustomer.CreateCustomerRequest,UCommerce.Pipelines.CreateCustomer.CreateCustomerResponse})">
            <summary>
            Creates <see cref="T:UCommerce.EntitiesV2.Customer"/> information if one isn't already assigned to the <see cref="T:UCommerce.EntitiesV2.PurchaseOrder"/>.
            </summary>
            <remarks>
            A billing address must be associated with the <see cref="T:UCommerce.EntitiesV2.PurchaseOrder"/> before executing this task.
            Task will try to located a pre-linked customer if a member is logged in and use that instead of creating a new customer.
            </remarks>
        </member>
        <member name="T:UCommerce.Pipelines.Definitions.Admin.DataTypeDelete.DeleteDataTypeTask">
            <summary>
            Deletes a <see cref="T:UCommerce.EntitiesV2.DataType"/>.
            </summary>
        </member>
        <member name="M:UCommerce.Pipelines.Definitions.Admin.DataTypeDelete.DeleteDataTypeTask.Execute(UCommerce.EntitiesV2.DataType)">
            <summary>
            Executes the specified subject.
            </summary>
            <param name="subject">The subject.</param>
            <returns></returns>
        </member>
        <member name="T:UCommerce.Pipelines.Definitions.Admin.DefinitionDelete.DeleteDefinitionTask">
            <summary>
            Deletes an <see cref="T:UCommerce.EntitiesV2.Definitions.IDefinition"/>.
            </summary>
            <remarks>
            Will work for <see cref="T:UCommerce.EntitiesV2.Definition"/> and <see cref="T:UCommerce.EntitiesV2.ProductDefinition"/> implementations.
            </remarks>
        </member>
        <member name="T:UCommerce.Pipelines.Definitions.Admin.DataTypeSave.SaveDataTypeTask">
            <summary>
            Saves a <see cref="T:UCommerce.EntitiesV2.DataType"/>
            </summary>
        </member>
        <member name="M:UCommerce.Pipelines.Definitions.Admin.DataTypeSave.SaveDataTypeTask.Execute(UCommerce.EntitiesV2.DataType)">
            <summary>
            Executes with the specified subject.
            </summary>
            <param name="subject">The subject.</param>
            <returns></returns>
        </member>
        <member name="T:UCommerce.Pipelines.Definitions.Admin.DefintionFieldSave.SaveDefinitionFieldTask">
            <summary>
            Saves a definition field.
            </summary>
        </member>
        <member name="M:UCommerce.Pipelines.Definitions.Admin.DefintionFieldSave.SaveDefinitionFieldTask.GetParentDefinition(UCommerce.EntitiesV2.Definitions.IDefinitionField)">
            <summary>
            Gets the parent definition.
            </summary>
            <remarks>
            General definition interface offers no way to get to parent definition
            so we have to look for the two implementations of definition fields 
            we've got and use those instead.
            </remarks>
            <param name="subject">The subject.</param>
            <returns></returns>
        </member>
        <member name="T:UCommerce.Pipelines.Definitions.Admin.DefinitionSave.SaveDefinitionTask">
            <summary>
            Saves an <see cref="T:UCommerce.EntitiesV2.Definitions.IDefinition"/>.
            </summary>
        </member>
        <member name="T:UCommerce.Pipelines.GenericPipeline`1">
            <summary>
            Generic pipeline.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:UCommerce.Pipelines.Globalization.LanguagePipeline">
            <summary>
            PipeLine that runs on Language when it's being created, saved or deleted.
            </summary>
        </member>
        <member name="T:UCommerce.Pipelines.Transactions.Baskets.CreateBasket.CreateBasketTask">
            <summary>
            Creates a <see cref="T:UCommerce.EntitiesV2.PurchaseOrder"/> with a specific <see cref="T:UCommerce.EntitiesV2.ProductCatalogGroup"/>, and <see cref="T:UCommerce.EntitiesV2.Currency"/>.
            </summary>
        </member>
        <member name="T:UCommerce.Pipelines.Transactions.Baskets.GetBasket.ExtendBasketLifeTime">
            <summary>
             Controls if and how a customer retains a basket.
            </summary>
        </member>
        <member name="T:UCommerce.Pipelines.Transactions.Baskets.GetBasket.LoadBasketTask">
            <summary>
            Loads a basket for a customer if one exists.
            </summary>
        </member>
        <member name="T:UCommerce.Pipelines.Basket.NamespaceDoc">
            <summary>
            Pipeline tasks to handle basket operation like adding and calculations. <see cref="T:UCommerce.Pipelines.Transactions.Baskets.Basket.BasketPipeline"/> is configured using /ucommerce/pipelines/basket.config.
            </summary>
        </member>
        <member name="T:UCommerce.Pipelines.Checkout.NamespaceDoc">
            <summary>
            Pipeline tasks to handle checkout operation like <see cref="T:UCommerce.Pipelines.Transactions.Baskets.Checkout.ConvertBasketToPurchaseOrderTask">converting a basket to a purchase order</see>,
            <see cref="T:UCommerce.Pipelines.Transactions.Baskets.Checkout.AssignOrderNumberTask">assigning an order number</see>, and <see cref="T:UCommerce.Pipelines.Transactions.Baskets.Checkout.CreateMemberForCustomerTask">creating members for customers</see>.
            <see cref="T:UCommerce.Pipelines.Transactions.Baskets.Checkout.CheckoutPipeline"/>&gt; is configured using /ucommerce/pipelines/Checkout.config.
            </summary>
        </member>
        <member name="T:UCommerce.Pipelines.Common.NamespaceDoc">
            <summary>
            Pipeline tasks common between basket and checkout pipelines. <see cref="T:UCommerce.Pipelines.Common.PurchaseOrderPipeline"/> can be used for generic pipelines working
            with <see cref="T:UCommerce.EntitiesV2.PurchaseOrder">purchase orders</see>.
            </summary>
        </member>
        <member name="M:UCommerce.Pipelines.Transactions.Orders.ToCompleted.AcquirePaymentTask.GetPaymentsForAcquire(UCommerce.EntitiesV2.PurchaseOrder)">
            <summary>
            Gets the payments eligible for acquire.
            </summary>
            <param name="subject">The subject.</param>
            <returns></returns>
        </member>
        <member name="M:UCommerce.Pipelines.Transactions.Orders.ToCancelled.CancelPaymentTask.GetPaymentsForCancellation(UCommerce.EntitiesV2.PurchaseOrder)">
            <summary>
            Gets the payments eligiable for cancellation.
            </summary>
            <param name="subject">The subject.</param>
            <returns></returns>
        </member>
        <member name="M:UCommerce.Pipelines.Transactions.Orders.ToCancelled.CancelPaymentTask.SetPurchaseOrderStatus(UCommerce.EntitiesV2.PurchaseOrder,System.Collections.Generic.IList{UCommerce.EntitiesV2.Payment})">
            <summary>
            Set the "RequiresAtetntion" status on the order if any of the orders payments statuses arent Cancelled or Refunded.
            </summary>
            <param name="subject">PurchaseOrder to check.</param>
        </member>
        <member name="T:UCommerce.Pipelines.Transactions.Orders.IncrementInventoryOnHandTask">
            <summary>
            Increments inventory according to quantity on order.
            </summary>
        </member>
        <member name="T:UCommerce.Pipelines.Catalog.ProductReviewComment.AutoApproveByProductCatalogGroupSettingTask">
            <summary>
             Sets status according to the require approval setting on current store
            </summary>
        </member>
        <member name="T:UCommerce.Pipelines.Catalog.ProductReviewComment.SaveProductReviewCommentTask">
            <summary>
            Saves the product review comment
            </summary>
        </member>
        <member name="T:UCommerce.Pipelines.Catalog.ProductReview.AutoApproveByProductCatalogGroupSettingTask">
            <summary>
             Sets status according to the require approval setting on current store.
            </summary>
        </member>
        <member name="T:UCommerce.Pipelines.Catalog.ProductReview.CalculateAverageProductRatingTask">
            <summary>
            Makes a recalculating on the products rating
            </summary>
        </member>
        <member name="T:UCommerce.Pipelines.Catalog.ProductReview.SaveProductReviewTask">
            <summary>
            Saves the product review
            </summary>
        </member>
        <member name="T:UCommerce.Pipelines.Catalog.ProductPipeline">
            <summary>
            Pipeline executed when products are saved.
            </summary>
        </member>
        <member name="T:UCommerce.Pipelines.Resources.ErrorMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:UCommerce.Pipelines.Resources.ErrorMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:UCommerce.Pipelines.Resources.ErrorMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:UCommerce.Pipelines.Resources.ErrorMessages.CannotAddProductFamilyToBasket">
            <summary>
              Looks up a localized string similar to The product with SKU &apos;{0}&apos; contains variants, and cannot be added the basket. Add a specific variant instead..
            </summary>
        </member>
        <member name="P:UCommerce.Pipelines.Resources.ErrorMessages.LineItemDoesNotExist">
            <summary>
              The line item with index {0} does not exist.
            </summary>
        </member>
        <member name="P:UCommerce.Pipelines.Resources.ErrorMessages.ProductDoesNotExist">
            <summary>
              Looks up a localized string similar to The product with SKU &apos;{0}&apos; does not exist..
            </summary>
        </member>
        <member name="P:UCommerce.Pipelines.Resources.ErrorMessages.VariantDoesNotExist">
            <summary>
              Looks up a localized string similar to The variant with SKU &apos;{0}-{1}&apos; does not exist..
            </summary>
        </member>
        <member name="T:UCommerce.Pipelines.Search.FacetDeindexerTask">
            <summary>
            Task removes facets from setup when ProductDefinitionField is deleted.
            </summary>
        </member>
        <member name="T:UCommerce.Pipelines.Search.FacetIndexerTask">
            <summary>
            Task converts a ProductDefinitionField into a facet using either a default indexer or any type that qualifies for the given type.
            </summary>
        </member>
        <member name="T:UCommerce.Pipelines.Search.SearchIndexerTask`1">
            <summary>
            Task can be hooked into every existing pipeline and will trigger indexing of each registered inderxer of type T.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
    </members>
</doc>
