{
  "Name": "Products/ByPropertyRecurse/en-GB",
  "LockMode": "Unlock",
  "Map": "docs.Products.Select(product => new {\r\n\t                                    product.ProductDefinition,\r\n\t                                    product.ThumbnailImageUrl,\r\n\t                                    product.PrimaryImageUrl,\r\n\t                                    product.Sku,\r\n\t                                    product.VariantSku,\r\n\t                                    product.Name,\r\n\t                                    product.DisplayOnSite,\r\n\t                                    product.Weight,\r\n\t                                    product.AllowOrdering,\r\n\t                                    product.ModifiedBy,\r\n\t                                    product.ModifiedOn,\r\n\t                                    product.CreatedOn,\r\n\t                                    product.CreatedBy,\r\n                                        product.Variants,\r\n\t                                    Rating = this.Recurse(product, x => x.Variants).Select(x => new[] {x.Rating}),\r\n\t                                    product.CategoryIds,\r\n                                        _ = this.Recurse(product, x => x.Variants).Select(x => x.Properties[\"en-GB\"].Select(z => (z.Value is string ? (IEnumerable<object>) new [] { z.Value } : (IEnumerable<object>) z.Value).Select(v => this.CreateField(LoadDocument(product.ProductDefinition).Fields.SingleOrDefault(field => field.Name == z.Key).Properties[\"en-GB\"][\"DisplayName\"] ?? z.Key, LoadDocument(LoadDocument(product.ProductDefinition).Fields.SingleOrDefault(field => field.Name == z.Key).DataTypeId).PreValues.SingleOrDefault(preValue => preValue.Value == v).Properties[\"en-GB\"][\"DisplayName\"] ?? v)))),\r\n                                        __ = this.Recurse(product, x => x.Variants).Select(x => x.Properties[\"invariant\"].Select(z => (z.Value is string ? (IEnumerable<object>) new [] { z.Value } : (IEnumerable<object>) z.Value).Select(v => this.CreateField(LoadDocument(product.ProductDefinition).Fields.SingleOrDefault(field => field.Name == z.Key).Properties[\"en-GB\"][\"DisplayName\"] ?? z.Key, LoadDocument(LoadDocument(product.ProductDefinition).Fields.SingleOrDefault(field => field.Name == z.Key).DataTypeId).PreValues.SingleOrDefault(preValue => preValue.Value == v).Properties[\"en-GB\"][\"DisplayName\"] ?? v)))),                                        \r\n\t\t\t\t\t\t\t\t\t\t___ = this.Recurse(product, x => x.Variants).Select(x => x.Prices.Select(y => this.CreateField(y.Key, y.Value)))\r\n                                    })",
  "Maps": [
    "docs.Products.Select(product => new {\r\n\t                                    product.ProductDefinition,\r\n\t                                    product.ThumbnailImageUrl,\r\n\t                                    product.PrimaryImageUrl,\r\n\t                                    product.Sku,\r\n\t                                    product.VariantSku,\r\n\t                                    product.Name,\r\n\t                                    product.DisplayOnSite,\r\n\t                                    product.Weight,\r\n\t                                    product.AllowOrdering,\r\n\t                                    product.ModifiedBy,\r\n\t                                    product.ModifiedOn,\r\n\t                                    product.CreatedOn,\r\n\t                                    product.CreatedBy,\r\n                                        product.Variants,\r\n\t                                    Rating = this.Recurse(product, x => x.Variants).Select(x => new[] {x.Rating}),\r\n\t                                    product.CategoryIds,\r\n                                        _ = this.Recurse(product, x => x.Variants).Select(x => x.Properties[\"en-GB\"].Select(z => (z.Value is string ? (IEnumerable<object>) new [] { z.Value } : (IEnumerable<object>) z.Value).Select(v => this.CreateField(LoadDocument(product.ProductDefinition).Fields.SingleOrDefault(field => field.Name == z.Key).Properties[\"en-GB\"][\"DisplayName\"] ?? z.Key, LoadDocument(LoadDocument(product.ProductDefinition).Fields.SingleOrDefault(field => field.Name == z.Key).DataTypeId).PreValues.SingleOrDefault(preValue => preValue.Value == v).Properties[\"en-GB\"][\"DisplayName\"] ?? v)))),\r\n                                        __ = this.Recurse(product, x => x.Variants).Select(x => x.Properties[\"invariant\"].Select(z => (z.Value is string ? (IEnumerable<object>) new [] { z.Value } : (IEnumerable<object>) z.Value).Select(v => this.CreateField(LoadDocument(product.ProductDefinition).Fields.SingleOrDefault(field => field.Name == z.Key).Properties[\"en-GB\"][\"DisplayName\"] ?? z.Key, LoadDocument(LoadDocument(product.ProductDefinition).Fields.SingleOrDefault(field => field.Name == z.Key).DataTypeId).PreValues.SingleOrDefault(preValue => preValue.Value == v).Properties[\"en-GB\"][\"DisplayName\"] ?? v)))),                                        \r\n\t\t\t\t\t\t\t\t\t\t___ = this.Recurse(product, x => x.Variants).Select(x => x.Prices.Select(y => this.CreateField(y.Key, y.Value)))\r\n                                    })"
  ],
  "Reduce": null,
  "TransformResults": null,
  "IsMapReduce": false,
  "IsCompiled": false,
  "Stores": {},
  "Indexes": {},
  "SortOptions": {
    "CRC 1 colon": "Double"
  },
  "Analyzers": {
    "__all_fields": "Lucene.Net.Analysis.KeywordAnalyzer"
  },
  "Fields": [],
  "Suggestions": {},
  "TermVectors": {},
  "SpatialIndexes": {},
  "InternalFieldsMapping": null,
  "Type": "Map",
  "DisableInMemoryIndexing": false
}