<configuration>
	<components>
		<!-- Pipeline Instance -->
		<component
						id="AddToBasket"
						service="UCommerce.Pipelines.IPipeline`1[[UCommerce.Pipelines.IPipelineArgs`2[[UCommerce.Pipelines.AddToBasket.AddToBasketRequest, UCommerce],[UCommerce.Pipelines.AddToBasket.AddToBasketResponse, UCommerce]], UCommerce]], UCommerce"
						type="UCommerce.Pipelines.Transactions.Baskets.AddToBasket.AddToBasketPipeline, UCommerce.Pipelines">
			<parameters>
				<tasks>
					<array>
						<!-- Validation -->
						<value>${AddToBasket.ValidatePipelineArguments}</value>
						<value>${AddToBasket.ValidateProductCatalogGroupContext}</value>
						<value>${AddToBasket.ValidateIsSellableProduct}</value>
						<value>${AddToBasket.ValidateProductIsAddedWithSameCurrencyAsBasket}</value>

						<!-- Set up new order line -->
						<value>${AddToBasket.CreateOrderLine}</value>
						<value>${AddToBasket.CalculateUnitPrice}</value>
						<value>${AddToBasket.CalculateUnitTax}</value>
						<value>${AddToBasket.CopyProductNameFromCatalog}</value>

						<!-- If existing order line should be used, override if found -->
						<value>${AddToBasket.OverrideOrderlineWithExisting}</value>
						
						<value>${AddToBasket.IncrementQuantity}</value>
						<value>${AddToBasket.AddNewOrderLineToOrder}</value>
						<value>${AddToBasket.ExecuteBasketPipeline}</value>
					</array>
				</tasks>
			</parameters>
			</component>

			<!-- Pipeline Tasks-->
		<component id="AddToBasket.ValidatePipelineArguments"
								 service="UCommerce.Pipelines.IPipelineTask`1[[UCommerce.Pipelines.IPipelineArgs`2[[UCommerce.Pipelines.AddToBasket.AddToBasketRequest, UCommerce],[UCommerce.Pipelines.AddToBasket.AddToBasketResponse, UCommerce]], UCommerce]], UCommerce"
								 type="UCommerce.Pipelines.Transactions.Baskets.AddToBasket.ValidatePipelineArgumentsTask, UCommerce.Pipelines" />
		
		<component id="AddToBasket.ValidateProductIsAddedWithSameCurrencyAsBasket"
								 service="UCommerce.Pipelines.IPipelineTask`1[[UCommerce.Pipelines.IPipelineArgs`2[[UCommerce.Pipelines.AddToBasket.AddToBasketRequest, UCommerce],[UCommerce.Pipelines.AddToBasket.AddToBasketResponse, UCommerce]], UCommerce]], UCommerce"
								 type="UCommerce.Pipelines.Transactions.Baskets.AddToBasket.ValidateProductIsAddedWithSameCurrencyAsBasketTask, UCommerce.Pipelines" />

		<component id="AddToBasket.AddNewOrderLineToOrder"
								 service="UCommerce.Pipelines.IPipelineTask`1[[UCommerce.Pipelines.IPipelineArgs`2[[UCommerce.Pipelines.AddToBasket.AddToBasketRequest, UCommerce],[UCommerce.Pipelines.AddToBasket.AddToBasketResponse, UCommerce]], UCommerce]], UCommerce"
								 type="UCommerce.Pipelines.Transactions.Baskets.AddToBasket.AddNewOrderLineToOrderTask, UCommerce.Pipelines" />
		
		<component id="AddToBasket.IncrementQuantity"
								 service="UCommerce.Pipelines.IPipelineTask`1[[UCommerce.Pipelines.IPipelineArgs`2[[UCommerce.Pipelines.AddToBasket.AddToBasketRequest, UCommerce],[UCommerce.Pipelines.AddToBasket.AddToBasketResponse, UCommerce]], UCommerce]], UCommerce"
								 type="UCommerce.Pipelines.Transactions.Baskets.AddToBasket.IncrementQuantityTask, UCommerce.Pipelines" />

		<component id="AddToBasket.ValidateProductCatalogGroupContext"
								 service="UCommerce.Pipelines.IPipelineTask`1[[UCommerce.Pipelines.IPipelineArgs`2[[UCommerce.Pipelines.AddToBasket.AddToBasketRequest, UCommerce],[UCommerce.Pipelines.AddToBasket.AddToBasketResponse, UCommerce]], UCommerce]], UCommerce"
								 type="UCommerce.Pipelines.Transactions.Baskets.AddToBasket.ValidateOrderAssignedToProductCatalogGroupTask, UCommerce.Pipelines" />

			<component id="AddToBasket.ValidateIsSellableProduct"
								 service="UCommerce.Pipelines.IPipelineTask`1[[UCommerce.Pipelines.IPipelineArgs`2[[UCommerce.Pipelines.AddToBasket.AddToBasketRequest, UCommerce],[UCommerce.Pipelines.AddToBasket.AddToBasketResponse, UCommerce]], UCommerce]], UCommerce"
								 type="UCommerce.Pipelines.Transactions.Baskets.AddToBasket.ValidateIsSellableProductTask, UCommerce.Pipelines" />

			<component id="AddToBasket.CalculateUnitPrice"
								 service="UCommerce.Pipelines.IPipelineTask`1[[UCommerce.Pipelines.IPipelineArgs`2[[UCommerce.Pipelines.AddToBasket.AddToBasketRequest, UCommerce],[UCommerce.Pipelines.AddToBasket.AddToBasketResponse, UCommerce]], UCommerce]], UCommerce"
								 type="UCommerce.Pipelines.Transactions.Baskets.AddToBasket.CalculateUnitPriceTask, UCommerce.Pipelines" />

			<component id="AddToBasket.CalculateUnitTax"
								 service="UCommerce.Pipelines.IPipelineTask`1[[UCommerce.Pipelines.IPipelineArgs`2[[UCommerce.Pipelines.AddToBasket.AddToBasketRequest, UCommerce],[UCommerce.Pipelines.AddToBasket.AddToBasketResponse, UCommerce]], UCommerce]], UCommerce"
								 type="UCommerce.Pipelines.Transactions.Baskets.AddToBasket.CalculateUnitTaxTask, UCommerce.Pipelines" />

			<component id="AddToBasket.OverrideOrderlineWithExisting"
								 service="UCommerce.Pipelines.IPipelineTask`1[[UCommerce.Pipelines.IPipelineArgs`2[[UCommerce.Pipelines.AddToBasket.AddToBasketRequest, UCommerce],[UCommerce.Pipelines.AddToBasket.AddToBasketResponse, UCommerce]], UCommerce]], UCommerce"
								 type="UCommerce.Pipelines.Transactions.Baskets.AddToBasket.OverrideOrderlineWithExistingTask, UCommerce.Pipelines" />

			<component id="AddToBasket.CopyProductNameFromCatalog"
								 service="UCommerce.Pipelines.IPipelineTask`1[[UCommerce.Pipelines.IPipelineArgs`2[[UCommerce.Pipelines.AddToBasket.AddToBasketRequest, UCommerce],[UCommerce.Pipelines.AddToBasket.AddToBasketResponse, UCommerce]], UCommerce]], UCommerce"
								 type="UCommerce.Pipelines.Transactions.Baskets.AddToBasket.CopyProductNameFromCatalogTask, UCommerce.Pipelines" />

			<component id="AddToBasket.CreateOrderLine"
								 service="UCommerce.Pipelines.IPipelineTask`1[[UCommerce.Pipelines.IPipelineArgs`2[[UCommerce.Pipelines.AddToBasket.AddToBasketRequest, UCommerce],[UCommerce.Pipelines.AddToBasket.AddToBasketResponse, UCommerce]], UCommerce]], UCommerce"
								 type="UCommerce.Pipelines.Transactions.Baskets.AddToBasket.CreateOrderLineTask, UCommerce.Pipelines" />

			<component id="AddToBasket.ExecuteBasketPipeline"
								 service="UCommerce.Pipelines.IPipelineTask`1[[UCommerce.Pipelines.IPipelineArgs`2[[UCommerce.Pipelines.AddToBasket.AddToBasketRequest, UCommerce],[UCommerce.Pipelines.AddToBasket.AddToBasketResponse, UCommerce]], UCommerce]], UCommerce"
								 type="UCommerce.Pipelines.Transactions.Baskets.AddToBasket.ExecuteBasketPipelineTask, UCommerce.Pipelines" >
				<parameters>
					<basketPipeline>${Basket}</basketPipeline>
				</parameters>
			</component>
		</components>
</configuration>